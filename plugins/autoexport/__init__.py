bl_info = {
    "name": "Auto Export GLB on Save",
    "blender": (2, 80, 0),
    "category": "Object",
    "version": (1, 0),
    "author": "ChatGPT",
    "description": "Exporte automatiquement en GLB Ã  chaque sauvegarde",
}
# Generated by ChatGPT

import bpy
import os

class AutoExportGLTFOperator(bpy.types.Operator):
    bl_idname = "wm.auto_export_gltf"
    bl_label = "Auto Export GLTF"

    def execute(self, context):
        filepath = bpy.data.filepath
        if filepath:
            # Change the extension to .glb
            export_path = os.path.splitext(filepath)[0] + ".glb"
            bpy.ops.export_scene.gltf(
                filepath=export_path,
                export_format='GLB',
                export_extras=True,
                export_apply=True,
            )
            self.report({'INFO'}, f"Exported GLTF to {export_path}")
        else:
            self.report({'ERROR'}, "Please save the .blend file first")
        return {'FINISHED'}

def save_handler(dummy):
    bpy.ops.wm.auto_export_gltf()

def register():
    bpy.utils.register_class(AutoExportGLTFOperator)
    bpy.app.handlers.save_post.append(save_handler)

def unregister():
    bpy.utils.unregister_class(AutoExportGLTFOperator)
    bpy.app.handlers.save_post.remove(save_handler)

if __name__ == "__main__":
    register()